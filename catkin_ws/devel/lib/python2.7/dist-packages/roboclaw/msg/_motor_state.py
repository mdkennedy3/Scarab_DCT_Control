"""autogenerated by genpy from roboclaw/motor_state.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class motor_state(genpy.Message):
  _md5sum = "10585f422ced85d5c376eb502ea760c3"
  _type = "roboclaw/motor_state"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 left_duty_sp
float64 left_duty
float64 right_duty_sp
float64 right_duty
int32 left_qpps_sp
int32 left_qpps
int32 right_qpps_sp
int32 right_qpps
float64 left_sp
float64 left
float64 right_sp
float64 right
float64 v_sp
float64 v
float64 w_sp
float64 w
float64 left_pid_pe
float64 left_pid_ie
float64 left_pid_de
float64 right_pid_pe
float64 right_pid_ie
float64 right_pid_de

"""
  __slots__ = ['left_duty_sp','left_duty','right_duty_sp','right_duty','left_qpps_sp','left_qpps','right_qpps_sp','right_qpps','left_sp','left','right_sp','right','v_sp','v','w_sp','w','left_pid_pe','left_pid_ie','left_pid_de','right_pid_pe','right_pid_ie','right_pid_de']
  _slot_types = ['float64','float64','float64','float64','int32','int32','int32','int32','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       left_duty_sp,left_duty,right_duty_sp,right_duty,left_qpps_sp,left_qpps,right_qpps_sp,right_qpps,left_sp,left,right_sp,right,v_sp,v,w_sp,w,left_pid_pe,left_pid_ie,left_pid_de,right_pid_pe,right_pid_ie,right_pid_de

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(motor_state, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.left_duty_sp is None:
        self.left_duty_sp = 0.
      if self.left_duty is None:
        self.left_duty = 0.
      if self.right_duty_sp is None:
        self.right_duty_sp = 0.
      if self.right_duty is None:
        self.right_duty = 0.
      if self.left_qpps_sp is None:
        self.left_qpps_sp = 0
      if self.left_qpps is None:
        self.left_qpps = 0
      if self.right_qpps_sp is None:
        self.right_qpps_sp = 0
      if self.right_qpps is None:
        self.right_qpps = 0
      if self.left_sp is None:
        self.left_sp = 0.
      if self.left is None:
        self.left = 0.
      if self.right_sp is None:
        self.right_sp = 0.
      if self.right is None:
        self.right = 0.
      if self.v_sp is None:
        self.v_sp = 0.
      if self.v is None:
        self.v = 0.
      if self.w_sp is None:
        self.w_sp = 0.
      if self.w is None:
        self.w = 0.
      if self.left_pid_pe is None:
        self.left_pid_pe = 0.
      if self.left_pid_ie is None:
        self.left_pid_ie = 0.
      if self.left_pid_de is None:
        self.left_pid_de = 0.
      if self.right_pid_pe is None:
        self.right_pid_pe = 0.
      if self.right_pid_ie is None:
        self.right_pid_ie = 0.
      if self.right_pid_de is None:
        self.right_pid_de = 0.
    else:
      self.left_duty_sp = 0.
      self.left_duty = 0.
      self.right_duty_sp = 0.
      self.right_duty = 0.
      self.left_qpps_sp = 0
      self.left_qpps = 0
      self.right_qpps_sp = 0
      self.right_qpps = 0
      self.left_sp = 0.
      self.left = 0.
      self.right_sp = 0.
      self.right = 0.
      self.v_sp = 0.
      self.v = 0.
      self.w_sp = 0.
      self.w = 0.
      self.left_pid_pe = 0.
      self.left_pid_ie = 0.
      self.left_pid_de = 0.
      self.right_pid_pe = 0.
      self.right_pid_ie = 0.
      self.right_pid_de = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4d4i14d.pack(_x.left_duty_sp, _x.left_duty, _x.right_duty_sp, _x.right_duty, _x.left_qpps_sp, _x.left_qpps, _x.right_qpps_sp, _x.right_qpps, _x.left_sp, _x.left, _x.right_sp, _x.right, _x.v_sp, _x.v, _x.w_sp, _x.w, _x.left_pid_pe, _x.left_pid_ie, _x.left_pid_de, _x.right_pid_pe, _x.right_pid_ie, _x.right_pid_de))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 160
      (_x.left_duty_sp, _x.left_duty, _x.right_duty_sp, _x.right_duty, _x.left_qpps_sp, _x.left_qpps, _x.right_qpps_sp, _x.right_qpps, _x.left_sp, _x.left, _x.right_sp, _x.right, _x.v_sp, _x.v, _x.w_sp, _x.w, _x.left_pid_pe, _x.left_pid_ie, _x.left_pid_de, _x.right_pid_pe, _x.right_pid_ie, _x.right_pid_de,) = _struct_4d4i14d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4d4i14d.pack(_x.left_duty_sp, _x.left_duty, _x.right_duty_sp, _x.right_duty, _x.left_qpps_sp, _x.left_qpps, _x.right_qpps_sp, _x.right_qpps, _x.left_sp, _x.left, _x.right_sp, _x.right, _x.v_sp, _x.v, _x.w_sp, _x.w, _x.left_pid_pe, _x.left_pid_ie, _x.left_pid_de, _x.right_pid_pe, _x.right_pid_ie, _x.right_pid_de))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 160
      (_x.left_duty_sp, _x.left_duty, _x.right_duty_sp, _x.right_duty, _x.left_qpps_sp, _x.left_qpps, _x.right_qpps_sp, _x.right_qpps, _x.left_sp, _x.left, _x.right_sp, _x.right, _x.v_sp, _x.v, _x.w_sp, _x.w, _x.left_pid_pe, _x.left_pid_ie, _x.left_pid_de, _x.right_pid_pe, _x.right_pid_ie, _x.right_pid_de,) = _struct_4d4i14d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4d4i14d = struct.Struct("<4d4i14d")
