/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /home/monroe/catkin_ws/src/Scarabs/scarab/mesh80211s/msg/MeshStation.msg
 *
 */


#ifndef MESH80211S_MESSAGE_MESHSTATION_H
#define MESH80211S_MESSAGE_MESHSTATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mesh80211s
{
template <class ContainerAllocator>
struct MeshStation_
{
  typedef MeshStation_<ContainerAllocator> Type;

  MeshStation_()
    : mac()
    , device()
    , inactive_time(0)
    , rx_bytes(0)
    , rx_packets(0)
    , tx_bytes(0)
    , tx_packets(0)
    , signal(0)
    , tx_bitrate(0)
    , llid(0)
    , plid(0)
    , plink()  {
    }
  MeshStation_(const ContainerAllocator& _alloc)
    : mac(_alloc)
    , device(_alloc)
    , inactive_time(0)
    , rx_bytes(0)
    , rx_packets(0)
    , tx_bytes(0)
    , tx_packets(0)
    , signal(0)
    , tx_bitrate(0)
    , llid(0)
    , plid(0)
    , plink(_alloc)  {
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mac_type;
  _mac_type mac;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _device_type;
  _device_type device;

   typedef uint32_t _inactive_time_type;
  _inactive_time_type inactive_time;

   typedef uint32_t _rx_bytes_type;
  _rx_bytes_type rx_bytes;

   typedef uint32_t _rx_packets_type;
  _rx_packets_type rx_packets;

   typedef uint32_t _tx_bytes_type;
  _tx_bytes_type tx_bytes;

   typedef uint32_t _tx_packets_type;
  _tx_packets_type tx_packets;

   typedef int32_t _signal_type;
  _signal_type signal;

   typedef uint16_t _tx_bitrate_type;
  _tx_bitrate_type tx_bitrate;

   typedef uint16_t _llid_type;
  _llid_type llid;

   typedef uint16_t _plid_type;
  _plid_type plid;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _plink_type;
  _plink_type plink;




  typedef boost::shared_ptr< ::mesh80211s::MeshStation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mesh80211s::MeshStation_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct MeshStation_

typedef ::mesh80211s::MeshStation_<std::allocator<void> > MeshStation;

typedef boost::shared_ptr< ::mesh80211s::MeshStation > MeshStationPtr;
typedef boost::shared_ptr< ::mesh80211s::MeshStation const> MeshStationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mesh80211s::MeshStation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mesh80211s::MeshStation_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mesh80211s

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/hydro/share/std_msgs/cmake/../msg'], 'mesh80211s': ['/home/monroe/catkin_ws/src/Scarabs/scarab/mesh80211s/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mesh80211s::MeshStation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mesh80211s::MeshStation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mesh80211s::MeshStation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mesh80211s::MeshStation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mesh80211s::MeshStation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mesh80211s::MeshStation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mesh80211s::MeshStation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0af11ca5c838b248549e689ebe504453";
  }

  static const char* value(const ::mesh80211s::MeshStation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0af11ca5c838b248ULL;
  static const uint64_t static_value2 = 0x549e689ebe504453ULL;
};

template<class ContainerAllocator>
struct DataType< ::mesh80211s::MeshStation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mesh80211s/MeshStation";
  }

  static const char* value(const ::mesh80211s::MeshStation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mesh80211s::MeshStation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string mac\n\
string device\n\
uint32 inactive_time\n\
uint32 rx_bytes\n\
uint32 rx_packets\n\
uint32 tx_bytes\n\
uint32 tx_packets\n\
int32 signal\n\
uint16 tx_bitrate\n\
uint16 llid\n\
uint16 plid\n\
string plink\n\
";
  }

  static const char* value(const ::mesh80211s::MeshStation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mesh80211s::MeshStation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mac);
      stream.next(m.device);
      stream.next(m.inactive_time);
      stream.next(m.rx_bytes);
      stream.next(m.rx_packets);
      stream.next(m.tx_bytes);
      stream.next(m.tx_packets);
      stream.next(m.signal);
      stream.next(m.tx_bitrate);
      stream.next(m.llid);
      stream.next(m.plid);
      stream.next(m.plink);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct MeshStation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mesh80211s::MeshStation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mesh80211s::MeshStation_<ContainerAllocator>& v)
  {
    s << indent << "mac: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mac);
    s << indent << "device: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.device);
    s << indent << "inactive_time: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.inactive_time);
    s << indent << "rx_bytes: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.rx_bytes);
    s << indent << "rx_packets: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.rx_packets);
    s << indent << "tx_bytes: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.tx_bytes);
    s << indent << "tx_packets: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.tx_packets);
    s << indent << "signal: ";
    Printer<int32_t>::stream(s, indent + "  ", v.signal);
    s << indent << "tx_bitrate: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.tx_bitrate);
    s << indent << "llid: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.llid);
    s << indent << "plid: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.plid);
    s << indent << "plink: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.plink);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MESH80211S_MESSAGE_MESHSTATION_H
